// 一　说出下列最终执行结果并解释为什么
var a = []
for (var i = 0; i < 10; i++){
    a[i] = function () {
        console.log(i)
    }
}

a[6]()

/**
 * 最终执行结果是10、
 * 当执行到for循环中的匿名函数的时候，i已经累加到了10。、
 * 这里和a[6]里的数字应该没关系吧
 */


// 二请说出下列最终执行结果并解释为什么

// var tmp = 123;
// if(true) {
//     console.log(tmp)
//     let tmp
// }

/**
 * 如果是从执行上下文来看，最终执行结果是123。
 * 首先执行全局上下文，当执行到console.log(tmp)的时候，会去上级上下文去找tmp
 * 就是全局中声明的tmp
 * 但是，console.log之后使用let声明的tmp不可以提升，所以console.log无法访问得到。
 * 如果从这一点来看，执行的时候应该会出错，无法执行。
 */


 // 三 结果ES6新语法，用最简单的方式找出数组中最小值
var arr = [12, 32, 34, 89, 4]
let min = Math.min(...arr)
console.log(min)

// 四 请详细说明 var , let , const 三种声明变量方式之间的具体差别。
/**
 * 1. var声明的变量可以提升，而let和const不可以提升
 * 2. let，const声明变量可以限制在块作用域，var声明的变量函数都可以访问到
 * 3. let和var声明的变量可以只声明不赋值，const必须有初始值
 * 4. var可以重复声明，let和const不可以
 * 5. const用于声明常量，
 */


 // 五 请说出下列代码的最终执行结果，并解释原因

 var a = 10
 var obj = {
     a: 20,
     fn () {
         setTimeout(() => {
            console.log(this.a)
         })
     }
 }

 obj.fn()
 /**
  * 输出结果为20
  * this指向obj
  */


 // 六 Symbol类型的用途
  /**
   * Symbol可以生成一个全局中的唯一值。为对象属性使用Symbol
   * 可以确保属性的独特性
   */


// 七 说说什么是浅拷贝，什么是深拷贝
 /**
  * 浅拷贝是拷贝了原来对象的引用地址而已，如果拷贝出来的对象发生了改变，也会影响到原来的对象
  * 深拷贝是根据元对象完全复制出来一个拥有自己独立内存的对象，和原来的对象不会发生相互影响
  */

// 八 TypeScript 与 javaScript之间的关系，
/**
 * TypeScript是Javascript的一个超集。
 */

 // 九 谈谈Typescript的优缺点
/**
 * 因为javaScript是动态的，弱类型的语言。使用javascript就会很灵活，也会在执行的时候出现一些意想不到意外
 * TypeScript，从名字就可以看出来有个type,所以就对属性的编写很严格。就是所说的强类型吧，也是静态的
 * 缺点就是感觉不够灵活...（好废的废话）
 */


// 十 描述引用计数的工作原理和优缺点
 /**
  * 工作原理： 当执行之后对象没有被引用，引用计数为0，就会在内存中把对象删除。
  * 优点： 当有没有被使用的垃圾存在，可以在第一时间回收，节约内存。从而减少程序暂停的次数
  * 缺点： 当引用关系改变的时候，引用计数器就去修改引用数字，会消耗大量的时间
  * 而且没法回收循环引用的对象
  */

// 十一 描述标记整理算法的工作流程
/**
 * 遍历所有对象并标记活动对象 → 整理对象，移动对象位置，使地址连续 →
 * 删除非活动对象
 */

// 十二 描述V8中新生代存储区垃圾回收的流程
/**
 * 将新生代存储区分为from和to两个相同大小的区域 → 
 * 将活动对象存储在from，to为空置的区域 → 
 * 标记整理对象，将活动对象整理到to空间 →
 * 释放from空间
 */

// 十三 描述增量标记算法在何时使用及工作原理
/**
 * 在V8的老生代对象回收时，通过增量标记算法实现回收效率的优化
 * 因为在执行垃圾回收的同时，程序是停止执行的，会影响执行的效率。
 * 增量标记就是将标记过程拆分成多个小部分执行，交替进行程序的执行和标记操作
 */